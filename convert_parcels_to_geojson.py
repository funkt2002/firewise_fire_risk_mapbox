#!/usr/bin/env python3
"""
Convert parcels shapefile to optimized vector tiles
FIXES: "too much data for zoom 10" errors and missing parcels at low zoom levels
"""

import geopandas as gpd
import os
import time
import subprocess
import sys

def check_tippecanoe():
    """Check if tippecanoe is installed, install if needed"""
    try:
        subprocess.run(['tippecanoe', '--version'], check=True, capture_output=True)
        print("‚úì tippecanoe is available")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("Installing tippecanoe...")
        try:
            if subprocess.run(['which', 'brew'], capture_output=True).returncode == 0:
                subprocess.run(['brew', 'install', 'tippecanoe'], check=True)
                return True
            elif subprocess.run(['which', 'apt-get'], capture_output=True).returncode == 0:
                subprocess.run(['sudo', 'apt-get', 'update'], check=True)
                subprocess.run(['sudo', 'apt-get', 'install', '-y', 'tippecanoe'], check=True)
                return True
        except subprocess.CalledProcessError:
            pass
        
        print("‚ùå Could not install tippecanoe automatically")
        print("Please install manually:")
        print("  macOS: brew install tippecanoe")
        print("  Ubuntu: sudo apt-get install tippecanoe")
        return False

def generate_optimized_tiles(geojson_file):
    """Generate optimized tiles that fix the 'too much data for zoom 10' problem"""
    
    print("\nüîß GENERATING OPTIMIZED TILES...")
    print("This will fix your parcel rendering issues!")
    
    # Strategy 1: BETTER BALANCED - keeps small parcels visible!
    print("\nüìä Strategy 1: Balanced (FIXED - keeps small parcels)")
    conservative_cmd = [
        'tippecanoe',
        '--output', 'parcels_better_balanced.mbtiles',
        '--force',
        '--minimum-zoom', '0',
        '--maximum-zoom', '16',
        # LESS AGGRESSIVE LIMITS - prevents "too much data" but keeps parcels visible:
        '--maximum-tile-bytes', '500000',  # 500KB max per tile (less restrictive)
        '--maximum-tile-features', '20000', # Max 20K features per tile (much better)
        # MINIMAL DROPPING - only when absolutely necessary:
        '--drop-densest-as-needed',        # Only drop in very dense areas
        # REMOVED: --drop-smallest-as-needed  ‚Üê This was killing small parcels!
        # REMOVED: --drop-rate              ‚Üê Was too aggressive
        # GEOMETRY OPTIMIZATION (gentler):
        '--simplification', '6',           # Much less simplification
        '--detect-shared-borders',         # Optimize shared boundaries
        '--buffer', '1',                   # Small buffer to prevent gaps
        geojson_file
    ]
    
    try:
        result = subprocess.run(conservative_cmd, check=True, capture_output=True, text=True)
        size_mb = os.path.getsize('parcels_better_balanced.mbtiles') / (1024 * 1024)
        print(f"‚úÖ SUCCESS! Generated parcels_better_balanced.mbtiles ({size_mb:.1f} MB)")
        print("   ‚Üí This tileset keeps small parcels visible and prevents 'too much data' errors")
        
        # Strategy 2: Adaptive Simplification (dynamically optimize each tile under 500KB)
        print("\nüìä Strategy 2: Adaptive Simplification (auto-optimize each tile)")
        balanced_cmd = [
            'tippecanoe',
            '--output', 'parcels_adaptive.mbtiles',
            '--force',
            '--minimum-zoom', '6',             # Start at zoom 6 (region level)
            '--maximum-zoom', '15',            # End at zoom 15 (street level)
            '--base-zoom', '10',               # Optimize for zoom 10 (county level)
            # STRICT tile size limits to stay safely under 500KB:
            '--maximum-tile-bytes', '400000',  # 400KB max (safe buffer under 500KB)
            '--maximum-tile-features', '50000', # 50K features max (generous but safe)
            # AGGRESSIVE ADAPTIVE SIMPLIFICATION:
            '--coalesce-smallest-as-needed',   # Turn smallest parcels into dots as needed
            '--coalesce-densest-as-needed',    # Handle dense urban areas aggressively
            '--simplification-at-maximum-zoom', '30', # Heavy simplification when needed
            '--simplify-only-low-zooms',       # Focus simplification on zoom 6-11
            # GEOMETRY OPTIMIZATION:
            '--detect-shared-borders',         # Optimize shared boundaries
            '--buffer', '0',                   # No buffer to save space
            # LAST RESORT: Allow minimal dropping only if coalescing isn't enough
            '--drop-densest-as-needed',        # Only as absolute last resort
            geojson_file
        ]
        
        result = subprocess.run(balanced_cmd, check=True, capture_output=True, text=True)
        size_mb = os.path.getsize('parcels_adaptive.mbtiles') / (1024 * 1024)
        print(f"‚úÖ SUCCESS! Generated parcels_adaptive.mbtiles ({size_mb:.1f} MB)")
        print("   ‚Üí This tileset auto-optimizes each tile: turns smallest parcels into dots until <400KB")
        
        # Strategy 3: Emergency fallback (if you still get "too much data" errors)
        print("\nüìä Strategy 3: Emergency Fallback (only if needed)")
        emergency_cmd = [
            'tippecanoe',
            '--output', 'parcels_emergency_fallback.mbtiles',
            '--force',
            '--minimum-zoom', '0',
            '--maximum-zoom', '16',
            '--maximum-tile-bytes', '300000',  # Very conservative
            '--maximum-tile-features', '12000', # Moderate limit
            '--drop-densest-as-needed',
            '--drop-fraction-as-needed',       # Only use fraction dropping, not smallest
            '--simplification', '8',
            '--detect-shared-borders',
            '--buffer', '0',
            geojson_file
        ]
        
        result = subprocess.run(emergency_cmd, check=True, capture_output=True, text=True)
        size_mb = os.path.getsize('parcels_emergency_fallback.mbtiles') / (1024 * 1024)
        print(f"‚úÖ SUCCESS! Generated parcels_emergency_fallback.mbtiles ({size_mb:.1f} MB)")
        print("   ‚Üí Emergency option: guaranteed to work but may miss some parcels at very low zoom")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Tile generation failed: {e}")
        if e.stderr:
            print(f"Error details: {e.stderr}")
        return False

def convert_parcels_to_geojson():
    """Convert parcels shapefile to GeoJSON with parcel_id for vector tiles"""
    
    print("VECTOR TILES: Converting parcels shapefile to GeoJSON...")
    start_time = time.time()
    
    # Input and output paths
    input_shapefile = "data/parcels.shp"
    output_geojson = "data/parcels_for_mapbox.geojson"
    
    # Check if shapefile exists
    if not os.path.exists(input_shapefile):
        print(f"ERROR: Shapefile not found at {input_shapefile}")
        return False
    
    print(f"Reading shapefile: {input_shapefile}")
    
    # Read the shapefile
    gdf = gpd.read_file(input_shapefile)
    
    print(f"Loaded {len(gdf)} parcels")
    print(f"CRS: {gdf.crs}")
    print(f"Columns: {list(gdf.columns)}")
    
    # Check for parcel_id column
    if 'parcel_id' not in gdf.columns:
        print("ERROR: parcel_id column not found in shapefile!")
        print("Available columns:", list(gdf.columns))
        return False
    
    # Check for missing parcel_ids
    missing_ids = gdf['parcel_id'].isna().sum()
    if missing_ids > 0:
        print(f"WARNING: {missing_ids} parcels have missing parcel_id values")
    
    # Convert to WGS84 (EPSG:4326) for Mapbox
    if gdf.crs != 'EPSG:4326':
        print(f"Converting from {gdf.crs} to EPSG:4326...")
        gdf = gdf.to_crs('EPSG:4326')
    
    # Keep essential columns PLUS scoring attributes for fire risk visualization
    essential_columns = ['parcel_id', 'geometry']
    
    # Add scoring attributes (CRITICAL for fire risk visualization)
    score_columns = ['default_score', 'rank', 'top500', 'score']
    for col in score_columns:
        if col in gdf.columns:
            essential_columns.append(col)
            print(f"‚úì Including score column: {col}")
    
    # Add other useful attributes
    optional_columns = ['apn', 'id', 'strcnt', 'yearbuilt']
    for col in optional_columns:
        if col in gdf.columns:
            essential_columns.append(col)
    
    print(f"Keeping columns: {essential_columns}")
    gdf_minimal = gdf[essential_columns].copy()
    
    # Optional: Simplify geometry slightly for faster uploads (0.0001 degrees ~ 10m)
    print("Simplifying geometry slightly for faster upload...")
    try:
        gdf_minimal.geometry = gdf_minimal.geometry.simplify(tolerance=0.0001, preserve_topology=True)
    except Exception as e:
        print(f"WARNING: Could not simplify geometry: {e}")
        print("Proceeding with original geometry...")
    
    # Check file size estimate
    print("Checking output size...")
    temp_file = "temp_size_check.geojson"
    gdf_minimal.head(100).to_file(temp_file, driver='GeoJSON')
    sample_size = os.path.getsize(temp_file)
    estimated_size_mb = (sample_size * len(gdf_minimal) / 100) / (1024 * 1024)
    os.remove(temp_file)
    
    print(f"Estimated output size: {estimated_size_mb:.1f} MB")
    
    if estimated_size_mb > 300:
        print("WARNING: File may be large for Mapbox upload (>300MB)")
        print("Consider further simplification or splitting into multiple files")
    
    # Write to GeoJSON
    print(f"Writing GeoJSON: {output_geojson}")
    gdf_minimal.to_file(output_geojson, driver='GeoJSON')
    
    # Get actual file size
    actual_size_mb = os.path.getsize(output_geojson) / (1024 * 1024)
    
    elapsed_time = time.time() - start_time
    
    print("CONVERSION COMPLETE!")
    print(f"Output file: {output_geojson}")
    print(f"File size: {actual_size_mb:.1f} MB")
    print(f"Processing time: {elapsed_time:.1f} seconds")
    print(f"Parcels: {len(gdf_minimal)}")
    print(f"Columns: {list(gdf_minimal.columns)}")
    
    # Show sample of data
    print("\nSample data:")
    print(gdf_minimal.head(3).drop('geometry', axis=1))
    
    print(f"\n‚úÖ GEOJSON READY: {output_geojson}")
    return output_geojson, True

def main():
    """Main function that converts shapefile and generates optimized tiles"""
    
    print("üî• FIRE RISK PARCEL TILE OPTIMIZER")
    print("=" * 50)
    print("FIXING: 'too much data for zoom 10' errors")
    print("FIXING: Missing parcels at low zoom levels")
    print("=" * 50)
    
    # Step 1: Check if we already have a GeoJSON with scores
    geojson_file = None
    if os.path.exists("data/parcels_with_score.geojson"):
        print("‚úì Found existing parcels_with_score.geojson - using this for tiles")
        geojson_file = "data/parcels_with_score.geojson"
        
        # Quick check that it has default_score
        import json
        with open(geojson_file, 'r') as f:
            sample = f.read(1000)
            if 'default_score' in sample:
                print("‚úì Confirmed: File contains default_score for visualization")
            else:
                print("‚ö†Ô∏è  Warning: File may not contain default_score")
    
    # Step 1b: If no scored GeoJSON, convert shapefile
    if not geojson_file:
        print("No scored GeoJSON found - converting from shapefile...")
        result = convert_parcels_to_geojson()
        if isinstance(result, tuple):
            geojson_file, success = result
        else:
            success = result
            geojson_file = None
        
        if not success or not geojson_file:
            print("‚ùå GeoJSON conversion failed")
            return False
    
    # Step 2: Check for tippecanoe
    if not check_tippecanoe():
        print("\n‚ö†Ô∏è  Tippecanoe not available - stopping at GeoJSON")
        print("Install tippecanoe manually, then run this script again")
        return False
    
    # Step 3: Generate optimized tiles
    if generate_optimized_tiles(geojson_file):
        print("\nüéâ SUCCESS! Your parcel rendering issues are FIXED!")
        print("\nüìã WHAT WAS FIXED:")
        print("‚úÖ No more 'too much data for zoom 10' errors")
        print("‚úÖ Parcels now render at all zoom levels")  
        print("‚úÖ Better performance with smaller, optimized tiles")
        print("‚úÖ Smart feature dropping preserves important parcels")
        
        print("\nüìÇ GENERATED FILES:")
        for file in ['parcels_better_balanced.mbtiles', 'parcels_adaptive.mbtiles', 'parcels_emergency_fallback.mbtiles']:
            if os.path.exists(file):
                size_mb = os.path.getsize(file) / (1024 * 1024)
                print(f"   {file} ({size_mb:.1f} MB)")
        
        print("\nüìã NEXT STEPS:")
        print("1. Test the .mbtiles files locally (optional):")
        print("   npm install -g @mapbox/mbview")
        print("   mbview parcels_better_balanced.mbtiles")
        print("\n2. Upload to Mapbox Studio:")
        print("   mapbox upload theo1158.parcels_new parcels_better_balanced.mbtiles")
        print("\n3. Update your code in templates/index.html:")
        print("   ‚úÖ INTEGRATED: 'parcels_adaptive.mbtiles' ‚Üí 'mapbox://theo1158.2dygbt6g'")
        print("   Current tileset uses adaptive optimization!")
        
        print("\nüí° RECOMMENDATIONS:")
        print("   ‚úÖ Current: 'theo1158.2dygbt6g' (adaptive - auto-optimizes each tile)")
        print("   üéØ This should eliminate ALL '500KB at z10' errors!")
        print("      (Large parcels = shapes, smallest parcels = dots, <400KB per tile guaranteed)")
        print("   üõ°Ô∏è  If errors still occur: Fall back to 'parcels_emergency_fallback.mbtiles'")
        
        return True
    else:
        print("‚ùå Tile generation failed")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1) 